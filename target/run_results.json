{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.10.5", "generated_at": "2025-07-27T17:36:48.532141Z", "invocation_id": "f221f068-8ec0-40fd-b9e1-96861355063b", "invocation_started_at": "2025-07-27T17:36:28.853813Z", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-27T17:36:32.928157Z", "completed_at": "2025-07-27T17:36:32.966320Z"}, {"name": "execute", "started_at": "2025-07-27T17:36:32.977122Z", "completed_at": "2025-07-27T17:36:35.678721Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.75344181060791, "adapter_response": {"_message": "CREATE TABLE (3.7k rows, 0 processed)", "code": "CREATE TABLE", "rows_affected": 3651, "bytes_processed": 0, "bytes_billed": 0, "location": "EU", "project_id": "checkmate-453316", "job_id": "e8a2407a-8d36-452b-8b81-f5b0db419512", "slot_ms": 396}, "message": "CREATE TABLE (3.7k rows, 0 processed)", "failures": null, "unique_id": "model.dbt_chess.calendar", "compiled": true, "compiled_code": "\n\n\nWITH cte_date_array AS (\n    SELECT\n      DATE_SUB(CURRENT_DATE(), INTERVAL x DAY) AS cal_date\n    FROM\n      UNNEST(GENERATE_ARRAY(0, 365 *10)) AS x\n),\n\ncte_apply_formatting AS (\n    SELECT\n\n          /* Extracting Basic Attibutes */\n          cal_date\n        , EXTRACT(DAY          FROM cal_date)                                                   AS day\n        , EXTRACT(WEEK(SUNDAY) FROM cal_date)                                                   AS week\n        , EXTRACT(ISOWEEK      FROM cal_date)                                                   AS iso_week\n        , EXTRACT(MONTH        FROM cal_date)                                                   AS month\n        , EXTRACT(QUARTER      FROM cal_date)                                                   AS quarter\n        , EXTRACT(YEAR         FROM cal_date)                                                   AS year\n        , FORMAT_DATE('%B', cal_date)                                                           AS month_name\n\n        /*Quarterly Format*/\n        , FORMAT_DATE('%Y-Q%Q', cal_date)                                                       AS year_quarter\n        , DATE_TRUNC(cal_date, QUARTER)                                                         AS quarter_start_date\n        , DATE_SUB(\n              DATE_TRUNC(DATE_ADD(cal_date, INTERVAL 1 QUARTER), QUARTER),\n              INTERVAL 1 DAY\n          )                                                                                     AS quarter_end_date\n\n        /* Monthly Formats */\n        , DATE_TRUNC(cal_date, MONTH)                                                           AS month_start_date\n        , DATE_SUB(\n              DATE_TRUNC(DATE_ADD(cal_date, INTERVAL 1 MONTH), MONTH),\n              INTERVAL 1 DAY\n          )                                                                                     AS month_end_date\n        , FORMAT_DATE('%b-%y', DATE_TRUNC(cal_date, MONTH))                                     AS month_year_short\n        , FORMAT_DATE('%B %Y', DATE_TRUNC(cal_date, MONTH))                                     AS month_year_full\n\n          /* Weekly Formats (ISO) - Mon to Sun */\n        , \"Week \" || EXTRACT(ISOWEEK FROM cal_date)                                             AS iso_week_desc\n        , DATE_TRUNC(cal_date, ISOWEEK)                                                         AS iso_week_start_date\n        , DATE_ADD(DATE_TRUNC(cal_date, ISOWEEK), INTERVAL 6 DAY)                               AS iso_week_end_date\n\n          /* Weekly Formats (Default) - Sun to Sat */\n        , \"Week \" || EXTRACT(WEEK(SUNDAY)  FROM cal_date)                                       AS week_number_desc\n        , DATE_TRUNC(cal_date, WEEK(SUNDAY))                                                    AS week_start_date\n        , DATE_ADD(DATE_TRUNC(cal_date, WEEK(SUNDAY)), INTERVAL 6 DAY)                          AS week_end_date\n\n\n        /* Yearly Boolean Date Flags */\n        , EXTRACT(YEAR FROM cal_date) = EXTRACT(YEAR FROM CURRENT_DATE())                                                                           AS flag_current_year\n        , EXTRACT(YEAR FROM cal_date) = EXTRACT(YEAR FROM DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR))                                                AS flag_1st_previous_year\n        , EXTRACT(YEAR FROM cal_date) = EXTRACT(YEAR FROM DATE_SUB(CURRENT_DATE(), INTERVAL 2 YEAR))                                                AS flag_2nd_previous_year\n        , cal_date BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL 12 MONTH) AND CURRENT_DATE()                                                           AS flag_current_last_12_months\n        , cal_date BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL 24 MONTH) AND DATE_SUB(CURRENT_DATE(), INTERVAL 12 MONTH)                              AS flag_previous_last_12_months\n\n\n        /* Quarterly Boolean Date Flags */\n        , cal_date BETWEEN DATE_TRUNC(CURRENT_DATE(), QUARTER)\n                      AND DATE_SUB(DATE_TRUNC(DATE_ADD(CURRENT_DATE(), INTERVAL 1 QUARTER), QUARTER), INTERVAL 1 DAY)                               AS flag_current_quarter\n\n        , cal_date BETWEEN DATE_TRUNC(DATE_SUB(CURRENT_DATE(), INTERVAL 1 QUARTER), QUARTER)\n                      AND DATE_SUB(DATE_TRUNC(CURRENT_DATE(), QUARTER), INTERVAL 1 DAY)                                                             AS flag_1st_previous_quarter\n\n        , cal_date BETWEEN DATE_TRUNC(DATE_SUB(CURRENT_DATE(), INTERVAL 2 QUARTER), QUARTER)\n                      AND DATE_SUB(DATE_TRUNC(DATE_SUB(CURRENT_DATE(), INTERVAL 1 QUARTER), QUARTER), INTERVAL 1 DAY)                               AS flag_2nd_previous_quarter\n\n        , cal_date BETWEEN DATE_TRUNC(DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR), QUARTER)\n                      AND DATE_SUB(DATE_TRUNC(DATE_ADD(DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR), INTERVAL 1 QUARTER), QUARTER), INTERVAL 1 DAY)\n                  AND EXTRACT(QUARTER FROM cal_date) = EXTRACT(QUARTER FROM CURRENT_DATE())                                                         AS flag_current_quarter_last_year\n\n        , cal_date BETWEEN DATE_TRUNC(DATE_SUB(DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR), INTERVAL 1 QUARTER), QUARTER)\n                      AND DATE_SUB(DATE_TRUNC(DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR), QUARTER), INTERVAL 1 DAY)\n                  AND EXTRACT(QUARTER FROM cal_date) = EXTRACT(QUARTER FROM DATE_SUB(CURRENT_DATE(), INTERVAL 1 QUARTER))                           AS flag_1st_previous_quarter_last_year\n\n        , cal_date BETWEEN DATE_TRUNC(DATE_SUB(DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR), INTERVAL 2 QUARTER), QUARTER)\n                      AND DATE_SUB(DATE_TRUNC(DATE_SUB(DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR), INTERVAL 1 QUARTER), QUARTER), INTERVAL 1 DAY)\n                  AND EXTRACT(QUARTER FROM cal_date) = EXTRACT(QUARTER FROM DATE_SUB(CURRENT_DATE(), INTERVAL 2 QUARTER))                           AS flag_2nd_previous_quarter_last_year\n\n        /* Monthly Boolean Date Flags */\n        , cal_date BETWEEN DATE_TRUNC(CURRENT_DATE(), MONTH) \n                      AND DATE_SUB(DATE_TRUNC(DATE_ADD(CURRENT_DATE(), INTERVAL 1 MONTH), MONTH), INTERVAL 1 DAY)                                   AS flag_current_month\n\n        , cal_date BETWEEN DATE_TRUNC(DATE_SUB(CURRENT_DATE(), INTERVAL 1 MONTH), MONTH) \n                      AND DATE_SUB(DATE_TRUNC(CURRENT_DATE(), MONTH), INTERVAL 1 DAY)                                                               AS flag_1st_previous_month\n\n        , cal_date BETWEEN DATE_TRUNC(DATE_SUB(CURRENT_DATE(), INTERVAL 2 MONTH), MONTH) \n                      AND LAST_DAY(DATE_SUB(CURRENT_DATE(), INTERVAL 2 MONTH))                                                                      AS flag_2nd_previous_month\n\n        , cal_date BETWEEN DATE_TRUNC(DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR), MONTH)\n                        AND DATE_SUB(DATE_TRUNC(DATE_ADD(DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR), INTERVAL 1 MONTH), MONTH), INTERVAL 1 DAY)\n                      AND EXTRACT(MONTH FROM cal_date) = EXTRACT(MONTH FROM CURRENT_DATE())                                                         AS flag_current_month_last_year\n\n        , cal_date BETWEEN DATE_TRUNC(DATE_SUB(DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR), INTERVAL 1 MONTH), MONTH)\n                        AND DATE_SUB(DATE_TRUNC(DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR), MONTH), INTERVAL 1 DAY)\n                      AND EXTRACT(MONTH FROM cal_date) = EXTRACT(MONTH FROM DATE_SUB(CURRENT_DATE(), INTERVAL 1 MONTH))                             AS flag_1st_previous_month_last_year\n\n        , cal_date BETWEEN DATE_TRUNC(DATE_SUB(DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR), INTERVAL 2 MONTH), MONTH)\n                        AND DATE_SUB(DATE_TRUNC(DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR), MONTH), INTERVAL 1 DAY)\n                      AND EXTRACT(MONTH FROM cal_date) = EXTRACT(MONTH FROM DATE_SUB(CURRENT_DATE(), INTERVAL 2 MONTH))                             AS flag_2nd_previous_month_last_year\n\n        /* Weekly (Starting Sunday) Boolean Date Flags */\n        , cal_date BETWEEN DATE_TRUNC(CURRENT_DATE(), WEEK)\n                      AND DATE_SUB(DATE_TRUNC(DATE_ADD(CURRENT_DATE(), INTERVAL 1 WEEK), WEEK), INTERVAL 1 DAY)                                     AS flag_current_week\n\n        , cal_date BETWEEN DATE_TRUNC(DATE_SUB(CURRENT_DATE(), INTERVAL 1 WEEK), WEEK)\n                      AND DATE_SUB(DATE_TRUNC(CURRENT_DATE(), WEEK), INTERVAL 1 DAY)                                                                AS flag_1st_previous_week\n\n        , cal_date BETWEEN DATE_TRUNC(DATE_SUB(CURRENT_DATE(), INTERVAL 2 WEEK), WEEK)\n                      AND DATE_SUB(DATE_TRUNC(DATE_SUB(CURRENT_DATE(), INTERVAL 1 WEEK), WEEK), INTERVAL 1 DAY)                                     AS flag_2nd_previous_week\n\n        , cal_date BETWEEN DATE_TRUNC(DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR), WEEK)\n                      AND DATE_SUB(DATE_TRUNC(DATE_ADD(DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR), INTERVAL 1 WEEK), WEEK), INTERVAL 1 DAY)\n                  AND EXTRACT(WEEK FROM cal_date) = EXTRACT(WEEK FROM CURRENT_DATE())                                                               AS flag_current_week_last_year\n\n        , cal_date BETWEEN DATE_TRUNC(DATE_SUB(DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR), INTERVAL 1 WEEK), WEEK)\n                      AND DATE_SUB(DATE_TRUNC(DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR), WEEK), INTERVAL 1 DAY)\n                  AND EXTRACT(WEEK FROM cal_date) = EXTRACT(WEEK FROM DATE_SUB(CURRENT_DATE(), INTERVAL 1 WEEK))                                    AS flag_1st_previous_week_last_year\n\n        , cal_date BETWEEN DATE_TRUNC(DATE_SUB(DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR), INTERVAL 2 WEEK), WEEK)\n                      AND DATE_SUB(DATE_TRUNC(DATE_SUB(DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR), INTERVAL 1 WEEK), WEEK), INTERVAL 1 DAY)\n                  AND EXTRACT(WEEK FROM cal_date) = EXTRACT(WEEK FROM DATE_SUB(CURRENT_DATE(), INTERVAL 2 WEEK))                                    AS flag_2nd_previous_week_last_year\n\n        /* ISO Weekly Boolean Date Flags */\n        , cal_date BETWEEN DATE_TRUNC(CURRENT_DATE(), WEEK(MONDAY))\n                      AND DATE_SUB(DATE_TRUNC(DATE_ADD(CURRENT_DATE(), INTERVAL 1 WEEK), WEEK(MONDAY)), INTERVAL 1 DAY)                             AS flag_current_iso_week\n\n        , cal_date BETWEEN DATE_TRUNC(DATE_SUB(CURRENT_DATE(), INTERVAL 1 WEEK), WEEK(MONDAY))\n                      AND DATE_SUB(DATE_TRUNC(CURRENT_DATE(), WEEK(MONDAY)), INTERVAL 1 DAY)                                                        AS flag_1st_previous_iso_week\n\n        , cal_date BETWEEN DATE_TRUNC(DATE_SUB(CURRENT_DATE(), INTERVAL 2 WEEK), WEEK(MONDAY))\n                      AND DATE_SUB(DATE_TRUNC(DATE_SUB(CURRENT_DATE(), INTERVAL 1 WEEK), WEEK(MONDAY)), INTERVAL 1 DAY)                             AS flag_2nd_previous_iso_week\n\n        , cal_date BETWEEN DATE_TRUNC(DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR), WEEK(MONDAY))\n                      AND DATE_SUB(DATE_TRUNC(DATE_ADD(DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR), INTERVAL 1 WEEK), WEEK(MONDAY)), INTERVAL 1 DAY)\n                  AND EXTRACT(ISOWEEK FROM cal_date) = EXTRACT(ISOWEEK FROM CURRENT_DATE())                                                         AS flag_current_iso_week_last_year\n\n        , cal_date BETWEEN DATE_TRUNC(DATE_SUB(DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR), INTERVAL 1 WEEK), WEEK(MONDAY))\n                      AND DATE_SUB(DATE_TRUNC(DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR), WEEK(MONDAY)), INTERVAL 1 DAY)\n                  AND EXTRACT(ISOWEEK FROM cal_date) = EXTRACT(ISOWEEK FROM DATE_SUB(CURRENT_DATE(), INTERVAL 1 WEEK))                              AS flag_1st_previous_iso_week_last_year\n\n        , cal_date BETWEEN DATE_TRUNC(DATE_SUB(DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR), INTERVAL 2 WEEK), WEEK(MONDAY))\n                      AND DATE_SUB(DATE_TRUNC(DATE_SUB(DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR), INTERVAL 1 WEEK), WEEK(MONDAY)), INTERVAL 1 DAY)\n                  AND EXTRACT(ISOWEEK FROM cal_date) = EXTRACT(ISOWEEK FROM DATE_SUB(CURRENT_DATE(), INTERVAL 2 WEEK))                              AS flag_2nd_previous_iso_week_last_year\n\n    FROM cte_date_array\n)\n\nSELECT * FROM cte_apply_formatting\nORDER BY cal_date DESC", "relation_name": "`checkmate-453316`.`dev_universal`.`calendar`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-27T17:36:32.938341Z", "completed_at": "2025-07-27T17:36:32.965682Z"}, {"name": "execute", "started_at": "2025-07-27T17:36:32.966907Z", "completed_at": "2025-07-27T17:36:40.564578Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 7.63859486579895, "adapter_response": {"_message": "SCRIPT (11.6 MiB processed)", "code": "SCRIPT", "bytes_processed": 12172703, "bytes_billed": 41943040, "location": "EU", "project_id": "checkmate-453316", "job_id": "d493921d-53e9-43af-b9f8-1347fb19ec9a", "slot_ms": 4710}, "message": "SCRIPT (11.6 MiB processed)", "failures": null, "unique_id": "model.dbt_chess.stg__player_games", "compiled": true, "compiled_code": "\n\n\n\nWITH cte_white_black_union AS (\n\n    SELECT\n        game_id,\n        game_date,\n        \"white\"                                                AS piece_color,\n        white.username                                         AS username,\n        white.rating                                           AS rating,\n        white.result                                           AS result,\n        rated,\n        time_class,\n        time_control,\n        rules,\n        accuracies.white                                       AS accuracy,\n        opening                                                AS opening_line,\n    FROM `checkmate-453316`.`chess_raw`.`games` \n\n      UNION ALL\n\n    SELECT\n        game_id,\n        game_date,\n        \"black\"                                                AS piece_color,\n        black.username                                         AS username,\n        black.rating                                           AS rating,\n        black.result                                           AS result,\n        rated,\n        time_class,\n        time_control,\n        rules,\n        accuracies.black                                       AS accuracy,\n        opening                                                AS opening_line,\n    FROM `checkmate-453316`.`chess_raw`.`games`\n)\n\nSELECT\n    t.game_id,\n    t.game_date,\n    t.username,\n    t.rating,\n    t.piece_color,\n    t.time_class,\n    t.rules,\n    t.result                                               AS raw_result,\n    t.rated,\n    CASE\n        WHEN t.result = \"win\"                 THEN \"win\"\n        WHEN t.result = \"timeout\"             THEN \"loss\"\n        WHEN t.result = \"threecheck\"          THEN \"loss\"\n        WHEN t.result = \"resigned\"            THEN \"loss\"\n        WHEN t.result = \"kingofthehill\"       THEN \"loss\"\n        WHEN t.result = \"checkmated\"          THEN \"loss\"\n        WHEN t.result = \"bughousepartnerlose\" THEN \"loss\"\n        WHEN t.result = \"abandoned\"           THEN \"loss\"\n        WHEN t.result = \"timevsinsufficient\"  THEN \"draw\"\n        WHEN t.result = \"stalemate\"           THEN \"draw\"\n        WHEN t.result = \"repetition\"          THEN \"draw\"\n        WHEN t.result = \"insufficient\"        THEN \"draw\"\n        WHEN t.result = \"agreed\"              THEN \"draw\"\n        WHEN t.result = \"50move\"              THEN \"draw\"\n    END                                                   AS win_loss_draw,\n    t.opening_line                                        AS opening_line,\n    TRIM(\n        REGEXP_REPLACE(REGEXP_REPLACE(t.opening_line , r'\\d.*$', ''), r'\\.{3,}\\s*$', '')\n    )                                                     AS opening,\n    t.accuracy,\nFROM cte_white_black_union t\n\nWHERE 1=1 \n  \n  \n    AND t.game_date BETWEEN CURRENT_DATE() - 30 AND CURRENT_DATE()\n  \n", "relation_name": "`checkmate-453316`.`dev_staging`.`stg__player_games`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-27T17:36:40.584260Z", "completed_at": "2025-07-27T17:36:40.599251Z"}, {"name": "execute", "started_at": "2025-07-27T17:36:40.600343Z", "completed_at": "2025-07-27T17:36:47.670179Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 7.098477602005005, "adapter_response": {"_message": "SCRIPT (3.4 MiB processed)", "code": "SCRIPT", "bytes_processed": 3590705, "bytes_billed": 52428800, "location": "EU", "project_id": "checkmate-453316", "job_id": "48fd0d67-f04a-4e0e-b5c5-e7c02382dc64", "slot_ms": 33602}, "message": "SCRIPT (3.4 MiB processed)", "failures": null, "unique_id": "model.dbt_chess.weekly_chess_player_metrics", "compiled": true, "compiled_code": "\n\n\n\nWITH cte_date_aggregate AS (\n      SELECT\n            cal.iso_week_start_date                                   AS week_start_date,\n            cal.iso_week_desc                                         AS week_number,\n            t.username,\n            t.piece_color,\n            t.time_class,\n            AVG(t.rating)                                             AS avg_rating,\n            AVG(t.accuracy)                                           AS avg_accuracy,\n            SUM(CASE WHEN t.win_loss_draw = \"win\"  THEN 1 ELSE 0 END) AS win_count,\n            SUM(CASE WHEN t.win_loss_draw = \"loss\" THEN 1 ELSE 0 END) AS loss_count,\n            SUM(CASE WHEN t.win_loss_draw = \"draw\" THEN 1 ELSE 0 END) AS draw_count,\n            COUNT(*)                                                  AS total_games\n      FROM `checkmate-453316`.`dev_staging`.`stg__player_games` t\n      LEFT JOIN `checkmate-453316`.`dev_universal`.`calendar` cal\n        ON t.game_date = cal.cal_date\n      WHERE 1=1\n        \n  \n    AND t.game_date BETWEEN CURRENT_DATE() - 30 AND CURRENT_DATE()\n  \n\n        AND t.rated = TRUE\n        AND t.rules = \"chess\"\n      GROUP BY ALL\n),\n\ncte_pivot_piece_color AS (\n    SELECT\n        wagg.week_start_date,\n        wagg.week_number,\n        wagg.username,\n        wagg.time_class,\n        AVG(wagg.avg_rating)                                                            AS avg_rating,\n        SUM(wagg.total_games)                                                           AS total_games,\n\n        SUM(CASE WHEN wagg.piece_color = \"white\" THEN wagg.win_count  ELSE 0 END)       AS white_win_count,\n        SUM(CASE WHEN wagg.piece_color = \"white\" THEN wagg.loss_count ELSE 0 END)       AS white_loss_count,\n        SUM(CASE WHEN wagg.piece_color = \"white\" THEN wagg.draw_count ELSE 0 END)       AS white_draw_count,\n        AVG(CASE WHEN wagg.piece_color = \"white\" THEN wagg.avg_accuracy ELSE NULL END)  AS white_accuracy,\n\n        SUM(CASE WHEN wagg.piece_color = \"black\" THEN wagg.win_count  ELSE 0 END)       AS black_win_count,\n        SUM(CASE WHEN wagg.piece_color = \"black\" THEN wagg.loss_count ELSE 0 END)       AS black_loss_count,\n        SUM(CASE WHEN wagg.piece_color = \"black\" THEN wagg.draw_count ELSE 0 END)       AS black_draw_count,\n        AVG(CASE WHEN wagg.piece_color = \"black\" THEN wagg.avg_accuracy ELSE NULL END)  AS black_accuracy,\n\n    FROM cte_date_aggregate wagg\n    GROUP BY ALL\n)\n\nSELECT\n      week_start_date,\n      week_number,\n      username,\n      time_class,\n      avg_rating,\n      total_games,\n      white_win_count,\n      white_loss_count,\n      white_draw_count,\n      white_accuracy,\n      black_win_count,\n      black_loss_count,\n      black_draw_count,\n      black_accuracy\nFROM cte_pivot_piece_color", "relation_name": "`checkmate-453316`.`dev_marts`.`weekly_chess_player_metrics`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-27T17:36:40.573995Z", "completed_at": "2025-07-27T17:36:40.594082Z"}, {"name": "execute", "started_at": "2025-07-27T17:36:40.594534Z", "completed_at": "2025-07-27T17:36:48.522735Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 7.9517903327941895, "adapter_response": {"_message": "SCRIPT (16.2 MiB processed)", "code": "SCRIPT", "bytes_processed": 16943032, "bytes_billed": 62914560, "location": "EU", "project_id": "checkmate-453316", "job_id": "9dee52c5-d94a-488b-9ec9-d455482eeddb", "slot_ms": 28506}, "message": "SCRIPT (16.2 MiB processed)", "failures": null, "unique_id": "model.dbt_chess.quarterly_chess_player_metrics", "compiled": true, "compiled_code": "\n\n\n\nWITH cte_date_aggregate AS (\n      SELECT\n            cal.quarter_start_date,\n            cal.year_quarter,\n            t.username,\n            t.piece_color,\n            t.time_class,\n            COALESCE(map.opening_archetype, \"Mapping Failed\")         AS opening_archetype,\n            AVG(t.accuracy)                                           AS avg_accuracy,\n            SUM(CASE WHEN t.win_loss_draw = \"win\"  THEN 1 ELSE 0 END) AS win_count,\n            SUM(CASE WHEN t.win_loss_draw = \"loss\" THEN 1 ELSE 0 END) AS loss_count,\n            SUM(CASE WHEN t.win_loss_draw = \"draw\" THEN 1 ELSE 0 END) AS draw_count,\n            COUNT(*)                                                  AS total_games\n      FROM `checkmate-453316`.`dev_staging`.`stg__player_games` t\n      LEFT JOIN `checkmate-453316`.`dev_universal`.`calendar` cal\n        ON t.game_date = cal.cal_date\n      LEFT JOIN `checkmate-453316`.`dev_universal`.`opening_mapping` map\n          ON t.opening = map.opening\n      WHERE 1=1\n        \n  \n    AND t.game_date BETWEEN CURRENT_DATE() - 30 AND CURRENT_DATE()\n  \n\n        AND t.rated = TRUE\n        AND t.rules = \"chess\"\n      GROUP BY ALL\n),\n\ncte_pivot_piece_color AS (\n    SELECT\n        wagg.quarter_start_date,\n        wagg.year_quarter,\n        wagg.username,\n        wagg.time_class,\n        wagg.opening_archetype,\n        SUM(wagg.total_games)                                                           AS total_games,\n\n        SUM(CASE WHEN wagg.piece_color = \"white\" THEN wagg.win_count  ELSE 0 END)       AS white_win_count,\n        SUM(CASE WHEN wagg.piece_color = \"white\" THEN wagg.loss_count ELSE 0 END)       AS white_loss_count,\n        SUM(CASE WHEN wagg.piece_color = \"white\" THEN wagg.draw_count ELSE 0 END)       AS white_draw_count,\n        AVG(CASE WHEN wagg.piece_color = \"white\" THEN wagg.avg_accuracy ELSE NULL END)  AS white_accuracy,\n\n        SUM(CASE WHEN wagg.piece_color = \"black\" THEN wagg.win_count  ELSE 0 END)       AS black_win_count,\n        SUM(CASE WHEN wagg.piece_color = \"black\" THEN wagg.loss_count ELSE 0 END)       AS black_loss_count,\n        SUM(CASE WHEN wagg.piece_color = \"black\" THEN wagg.draw_count ELSE 0 END)       AS black_draw_count,\n        AVG(CASE WHEN wagg.piece_color = \"black\" THEN wagg.avg_accuracy ELSE NULL END)  AS black_accuracy,\n\n    FROM cte_date_aggregate wagg\n    GROUP BY ALL\n)\n\nSELECT\n      quarter_start_date,\n      year_quarter,\n      username,\n      time_class,\n      opening_archetype,\n      total_games,\n      white_win_count,\n      white_loss_count,\n      white_draw_count,\n      white_accuracy,\n      black_win_count,\n      black_loss_count,\n      black_draw_count,\n      black_accuracy\nFROM cte_pivot_piece_color", "relation_name": "`checkmate-453316`.`dev_marts`.`quarterly_chess_player_metrics`", "batch_results": null}], "elapsed_time": 16.88071918487549, "args": {"indirect_selection": "eager", "skip_nodes_if_on_run_start_fails": false, "send_anonymous_usage_stats": true, "print": true, "show_all_deprecations": false, "partial_parse": true, "strict_mode": false, "log_file_max_bytes": 10485760, "log_path": "/home/filpill/projects/dbt_chess/logs", "printer_width": 80, "select": [], "state_modified_compare_more_unrendered_values": false, "use_fast_test_edges": false, "log_level_file": "debug", "partial_parse_file_diff": true, "version_check": true, "vars": {}, "log_format": "default", "empty": false, "introspect": true, "macro_debugging": false, "require_batched_execution_for_custom_microbatch_strategy": false, "quiet": false, "warn_error_options": {"error": [], "warn": [], "silence": []}, "require_explicit_package_overrides_for_builtin_materializations": true, "cache_selected_only": false, "profiles_dir": "/home/filpill/.dbt", "defer": false, "upload_to_artifacts_ingest_api": false, "require_all_warnings_handled_by_warn_error": false, "require_generic_test_arguments_property": false, "use_colors_file": true, "require_yaml_configuration_for_mf_time_spines": false, "log_format_file": "debug", "use_colors": true, "validate_macro_args": false, "populate_cache": true, "favor_state": false, "exclude": [], "show_resource_report": false, "require_resource_names_without_spaces": true, "source_freshness_run_project_hooks": true, "static_parser": true, "invocation_command": "dbt run", "project_dir": "/home/filpill/projects/dbt_chess", "write_json": true, "which": "run", "state_modified_compare_vars": false, "log_level": "info", "require_nested_cumulative_type_params": false}}